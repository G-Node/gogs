// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/repo.go

// Package mock_context is a generated GoMock package.
package mock_context

import (
	reflect "reflect"

	db "github.com/NII-DG/gogs/internal/db"
	git "github.com/gogs/git-module"
	gomock "github.com/golang/mock/gomock"
)

// MockAbstructCtxRepository is a mock of AbstructCtxRepository interface.
type MockAbstructCtxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructCtxRepositoryMockRecorder
}

// MockAbstructCtxRepositoryMockRecorder is the mock recorder for MockAbstructCtxRepository.
type MockAbstructCtxRepositoryMockRecorder struct {
	mock *MockAbstructCtxRepository
}

// NewMockAbstructCtxRepository creates a new mock instance.
func NewMockAbstructCtxRepository(ctrl *gomock.Controller) *MockAbstructCtxRepository {
	mock := &MockAbstructCtxRepository{ctrl: ctrl}
	mock.recorder = &MockAbstructCtxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructCtxRepository) EXPECT() *MockAbstructCtxRepositoryMockRecorder {
	return m.recorder
}

// GetBranchName mocks base method.
func (m *MockAbstructCtxRepository) GetBranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBranchName indicates an expected call of GetBranchName.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetBranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchName", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetBranchName))
}

// GetCommit mocks base method.
func (m *MockAbstructCtxRepository) GetCommit() *git.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit")
	ret0, _ := ret[0].(*git.Commit)
	return ret0
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetCommit))
}

// GetCommitId mocks base method.
func (m *MockAbstructCtxRepository) GetCommitId() *git.SHA1 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitId")
	ret0, _ := ret[0].(*git.SHA1)
	return ret0
}

// GetCommitId indicates an expected call of GetCommitId.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetCommitId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitId", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetCommitId))
}

// GetDbRepo mocks base method.
func (m *MockAbstructCtxRepository) GetDbRepo() db.AbstructDbRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbRepo")
	ret0, _ := ret[0].(db.AbstructDbRepository)
	return ret0
}

// GetDbRepo indicates an expected call of GetDbRepo.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetDbRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbRepo", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetDbRepo))
}

// GetGitRepo mocks base method.
func (m *MockAbstructCtxRepository) GetGitRepo() *git.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepo")
	ret0, _ := ret[0].(*git.Repository)
	return ret0
}

// GetGitRepo indicates an expected call of GetGitRepo.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetGitRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepo", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetGitRepo))
}

// GetLastCommitIdStr mocks base method.
func (m *MockAbstructCtxRepository) GetLastCommitIdStr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommitIdStr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLastCommitIdStr indicates an expected call of GetLastCommitIdStr.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetLastCommitIdStr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommitIdStr", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetLastCommitIdStr))
}

// GetRepoLink mocks base method.
func (m *MockAbstructCtxRepository) GetRepoLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoLink indicates an expected call of GetRepoLink.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetRepoLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoLink", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetRepoLink))
}

// GetTreePath mocks base method.
func (m *MockAbstructCtxRepository) GetTreePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTreePath indicates an expected call of GetTreePath.
func (mr *MockAbstructCtxRepositoryMockRecorder) GetTreePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreePath", reflect.TypeOf((*MockAbstructCtxRepository)(nil).GetTreePath))
}

// MockAbstructGitRepository is a mock of AbstructGitRepository interface.
type MockAbstructGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructGitRepositoryMockRecorder
}

// MockAbstructGitRepositoryMockRecorder is the mock recorder for MockAbstructGitRepository.
type MockAbstructGitRepositoryMockRecorder struct {
	mock *MockAbstructGitRepository
}

// NewMockAbstructGitRepository creates a new mock instance.
func NewMockAbstructGitRepository(ctrl *gomock.Controller) *MockAbstructGitRepository {
	mock := &MockAbstructGitRepository{ctrl: ctrl}
	mock.recorder = &MockAbstructGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructGitRepository) EXPECT() *MockAbstructGitRepositoryMockRecorder {
	return m.recorder
}

// BranchCommit mocks base method.
func (m *MockAbstructGitRepository) BranchCommit(branch string, opts ...git.CatFileCommitOptions) (*git.Commit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{branch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BranchCommit", varargs...)
	ret0, _ := ret[0].(*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BranchCommit indicates an expected call of BranchCommit.
func (mr *MockAbstructGitRepositoryMockRecorder) BranchCommit(branch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{branch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchCommit", reflect.TypeOf((*MockAbstructGitRepository)(nil).BranchCommit), varargs...)
}

// MockAbstructCommit is a mock of AbstructCommit interface.
type MockAbstructCommit struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructCommitMockRecorder
}

// MockAbstructCommitMockRecorder is the mock recorder for MockAbstructCommit.
type MockAbstructCommitMockRecorder struct {
	mock *MockAbstructCommit
}

// NewMockAbstructCommit creates a new mock instance.
func NewMockAbstructCommit(ctrl *gomock.Controller) *MockAbstructCommit {
	mock := &MockAbstructCommit{ctrl: ctrl}
	mock.recorder = &MockAbstructCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructCommit) EXPECT() *MockAbstructCommitMockRecorder {
	return m.recorder
}

// Blob mocks base method.
func (m *MockAbstructCommit) Blob(subpath string, opts ...git.LsTreeOptions) (*git.Blob, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subpath}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blob", varargs...)
	ret0, _ := ret[0].(*git.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blob indicates an expected call of Blob.
func (mr *MockAbstructCommitMockRecorder) Blob(subpath interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subpath}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blob", reflect.TypeOf((*MockAbstructCommit)(nil).Blob), varargs...)
}
