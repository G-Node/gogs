// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repo.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/ivis-yoshida/gogs/internal/db"
)

// MockAbstructDbRepository is a mock of AbstructDbRepository interface.
type MockAbstructDbRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAbstructDbRepositoryMockRecorder
}

// MockAbstructDbRepositoryMockRecorder is the mock recorder for MockAbstructDbRepository.
type MockAbstructDbRepositoryMockRecorder struct {
	mock *MockAbstructDbRepository
}

// NewMockAbstructDbRepository creates a new mock instance.
func NewMockAbstructDbRepository(ctrl *gomock.Controller) *MockAbstructDbRepository {
	mock := &MockAbstructDbRepository{ctrl: ctrl}
	mock.recorder = &MockAbstructDbRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstructDbRepository) EXPECT() *MockAbstructDbRepositoryMockRecorder {
	return m.recorder
}

// FullName mocks base method.
func (m *MockAbstructDbRepository) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockAbstructDbRepositoryMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockAbstructDbRepository)(nil).FullName))
}

// GetDefaultBranch mocks base method.
func (m *MockAbstructDbRepository) GetDefaultBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockAbstructDbRepositoryMockRecorder) GetDefaultBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockAbstructDbRepository)(nil).GetDefaultBranch))
}

// UpdateRepoFile mocks base method.
func (m *MockAbstructDbRepository) UpdateRepoFile(doer *db.User, opts db.UpdateRepoFileOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoFile", doer, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoFile indicates an expected call of UpdateRepoFile.
func (mr *MockAbstructDbRepositoryMockRecorder) UpdateRepoFile(doer, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoFile", reflect.TypeOf((*MockAbstructDbRepository)(nil).UpdateRepoFile), doer, opts)
}
